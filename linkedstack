#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

// Node structure
typedef struct sNode {
    int data;
    struct sNode* next;
} Node;

// Stack structure
typedef struct sStack {
    Node* head;
} Stack;

// Function to push an element onto the stack
void push(Stack* s, int val) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        return;
    }
    newNode->data = val;
    newNode->next = s->head;
    s->head = newNode;
}

// Function to pop an element from the stack
int pop(Stack* s) {
    if (s->head == NULL) {
        printf("Stack underflow\n");
        return -1; // Indicate stack is empty
    }
    Node* temp = s->head;
    int poppedValue = temp->data;
    s->head = s->head->next;
    free(temp);
    return poppedValue;
}

// Function to print the stack for debugging
void print(Stack* s) {
    Node* current = s->head;
    printf("Stack: ");
    while (current) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Function to convert string to integer
int str2num(char* str) {
    return atoi(str);
}

// Function to interpret postfix expression
int interpret(Stack* s, const char* str) {
    char* token = strtok((char*)str, " ");
    while (token) {
        if (isdigit(token[0]) || (token[0] == '-' && isdigit(token[1]))) {
            push(s, str2num(token));
        } else {
            int b = pop(s);
            int a = pop(s);
            switch (token[0]) {
                case '+': push(s, a + b); break;
                case '-': push(s, a - b); break;
                case '*': push(s, a * b); break;
                case '/': 
                    if (b == 0) {
                        printf("Error: Division by zero\n");
                        return 0;
                    }
                    push(s, a / b); 
                    break;
            }
        }
        token = strtok(NULL, " ");
    }
    return pop(s);
}

// Main function
t int main() {
    Stack stack = {.head = NULL};
    const char* str = "15 6 + 3 - 7 / *";
    int result = interpret(&stack, str);
    printf("Result: %d\n", result);
    return 0;
}
